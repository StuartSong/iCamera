import numpy as np
import cv2
import time
import math
import sys
import argparse
from datetime import datetime
import uuid
import os
import shutil
from matplotlib import pyplot as plt
import glob
import requests

def classify_gray_hist(image1,image2,size = (256,256)):
	image1 = cv2.resize(image1,size)
	image2 = cv2.resize(image2,size)
	hist1 = cv2.calcHist([image1],[0],None,[256],[0.0,255.0])
	hist2 = cv2.calcHist([image2],[0],None,[256],[0.0,255.0])
	plt.plot(range(256),hist1,'r')
	plt.plot(range(256),hist2,'b')
	plt.show()
	degree = 0
	for i in range(len(hist1)):
		if hist1[i] != hist2[i]:
			degree = degree + (1 - abs(hist1[i]-hist2[i])/max(hist1[i],hist2[i]))
		else:
			degree = degree + 1
	degree = degree/len(hist1)
	return degree
 
# Caculate samilarity theough one channel
def calculate(image1,image2):
	hist1 = cv2.calcHist([image1],[0],None,[256],[0.0,255.0])
	hist2 = cv2.calcHist([image2],[0],None,[256],[0.0,255.0])
	degree = 0
	for i in range(len(hist1)):
		if hist1[i] != hist2[i]:
			degree = degree + (1 - abs(hist1[i]-hist2[i])/max(hist1[i],hist2[i]))
		else:
			degree = degree + 1
	degree = degree/len(hist1)
	return degree
 
# Caculate samilarity theough every channel
# def classify_hist_with_split(image1,image2,size = (256,256)):
	# # Resize the image and seperate it to three channel, and calculate similarity by each
	# image1 = cv2.resize(image1,size)
	# image2 = cv2.resize(image2,size)
	# sub_image1 = cv2.split(image1)
	# sub_image2 = cv2.split(image2)
	# sub_data = 0
	# for im1,im2 in zip(sub_image1,sub_image2):
		# sub_data += calculate(im1,im2)
	# sub_data = sub_data/3
	# return sub_data

# Average Hash Value
def classify_aHash(image1,image2):
	image1 = cv2.resize(image1,(100,100))
	image2 = cv2.resize(image2,(100,100))
	gray1 = cv2.cvtColor(image1,cv2.COLOR_BGR2GRAY)
	gray2 = cv2.cvtColor(image2,cv2.COLOR_BGR2GRAY)
	hash1 = getHash(gray1)
	hash2 = getHash(gray2)
	return Hamming_distance(hash1,hash2)

def classify_pHash(image1,image2):
	image1 = cv2.resize(image1,(100,100))
	image2 = cv2.resize(image2,(100,100))
	gray1 = cv2.cvtColor(image1,cv2.COLOR_BGR2GRAY)
	gray2 = cv2.cvtColor(image2,cv2.COLOR_BGR2GRAY)
	dct1 = cv2.dct(np.float32(gray1))
	dct2 = cv2.dct(np.float32(gray2))
	dct1_roi = dct1[0:8,0:8]
	dct2_roi = dct2[0:8,0:8]
	hash1 = getHash(dct1_roi)
	hash2 = getHash(dct2_roi)
	return Hamming_distance(hash1,hash2)

# Get hash value from inputting gray images
def getHash(image):
	avreage = np.mean(image)
	hash = []
	for i in range(image.shape[0]):
		for j in range(image.shape[1]):
			if image[i,j] > avreage:
				hash.append(1)
			else:
				hash.append(0)
	return hash
 
# Calculate Hamming values
def Hamming_distance(hash1,hash2):
	num = 0
	for index in range(len(hash1)):
		if hash1[index] != hash2[index]:
			num += 1
	return num


def variance_of_laplacian(image):
	return cv2.Laplacian(image, cv2.CV_64F).var()



def stop(c):
	if c > 10:
		return False
	else:
		return True

# url = 'http://161.92.142.211:6543/imagecap/jiafeng'
# filenames = glob.glob('/home/pi/Patient/'+r'/*')
# for filename in filenames:
# fileinfo = {'realfile': open(filename, 'rb')}
# data = {"realname":filename}
# requests.post(url, files=fileinfo, data = data)
# print('good')

cap = cv2.VideoCapture(0) # Turn on camera
# Set clarity (width and height) of picture
#cap.set(cv2.cv.CV_CAP_PROP_FRAME_WIDTH,409)
#cap.set(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT,216)
cap.set(cv2.cv.CV_CAP_PROP_FRAME_WIDTH,4096)
cap.set(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT,2160)

n = 0
print('Turning on Camera...')
time.sleep(1)
print('Starting calibration process...\nPlease put files on the scanner then remove it')

filenames = glob.glob('/home/pi/Patient/'+r'/*')
for filename in filenames:
	os.remove(filename)

fm = [] # Create an array for comparing value
while(True):
	n = n+1
	ret, frame = cap.read()
	cv2.imwrite('/home/pi/Test/'+str(n)+'.jpg',frame,[int(cv2.IMWRITE_JPEG_QUALITY)]) # save photo
	#cv2.imshow('/home/pi/Test/'+str(n)+'.jpg',frame)
	print('Calibrating')

	ap = argparse.ArgumentParser()
	ap.add_argument("-i", "--images",
		help="path to input directory of images")
	ap.add_argument("-t", "--threshold", type=float, default=5000.0,
		help="focus measures that fall below this value will be considered 'blurry'")
	args = vars(ap.parse_args())
	
	imagePath = '/home/pi/Test/'+str(n)+'.jpg' # Take where image is saved
	image = cv2.imread(imagePath)
	gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	fm.append(variance_of_laplacian(gray))
	os.remove('/home/pi/Test/'+str(n)+'.jpg')

	if n == 20: # Calibrate times
		break

time.sleep(2)
print('Calibriation Completed\nNow please put files on the scanner')
fm.sort(reverse=True) # Sort out highest values
average = np.mean(fm[5:15]) # Take average of values as baseline
print(str(average),str(fm))
# average = 10
time.sleep(5)

PicturePath_Mark = []
fm = []
n = 0
while(True):
	n = n+1
	ret, frame = cap.read()
	cv2.imwrite('/home/pi/Test/'+str(n)+'.jpg',frame,[int(cv2.IMWRITE_JPEG_QUALITY), 100])
	print('Working...')

	ap = argparse.ArgumentParser()
	ap.add_argument("-i", "--images",
		help="path to input directory of images")
	ap.add_argument("-t", "--threshold", type=float, default=average,
		help="focus measures that fall below this value will be considered 'blurry'")
	args = vars(ap.parse_args())

	imagePath = '/home/pi/Test/'+str(n)+'.jpg'
	image = cv2.imread(imagePath)
	gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	fm.append(variance_of_laplacian(gray))
	print('Solution:'+str(fm[-1]))

	# Eliminate all blurry photos
	if fm[-1] < args["threshold"]:
		text = "Blurry"
		print('This Photo is blurry. Ditching...')
		os.remove('/home/pi/Test/'+str(n)+'.jpg')

	elif fm[-1] > args["threshold"]:
		text = "Not Blurry"
		Time = datetime.now().strftime('%Y-%m-%d-%H-%M-%S.jpg')
		UUID = str(uuid.uuid1())
		New_imagePath = '/home/pi/Patient/'+Time
		shutil.move(imagePath,New_imagePath) # Save the image to 
		PicturePath_Mark.append(New_imagePath)
		
		# print(n,PicturePath_Mark)
		if n>1:
			image1 = PicturePath_Mark[-2]
			image2 = PicturePath_Mark[-1]
			img1 = cv2.imread(image1)
			img2 = cv2.imread(image2)
			num1 = classify_aHash(img1,img2)
			# num2 = classify_pHash(img1,img2)
			print('Difference:'+str(num1))
			if num1 < 500:
				# Compare clarity and remove the low one
				if fm[-1] > fm[-2]:
					os.remove(image1)# Remove image
					PicturePath_Mark.pop(-2)# Remove image in array
					fm.pop(-2) # Remove clarity
				else:
					os.remove(image2)
					PicturePath_Mark.pop(-1)
					fm.pop(-1)
			else:
				# Send Photos to the server
				url = 'http://161.92.142.211:6543/imagecap/jiafeng'
				name = PicturePath_Mark[-2]
				fileinfo = {'realfile': open(name, 'rb')}
				data = {"realname":name}
				requests.post(url, files=fileinfo, data = data)
				print('good')
		else:
			pass
	time.sleep(0.5)
	# k = stop(c)

# cap.release()
# cv2.destroyAllWindows()


